# React应用生产环境多阶段构建Dockerfile\n# ====================================\n# 构建阶段\n# ====================================\nFROM node:18-alpine AS build\n\n# 设置工作目录\nWORKDIR /app\n\n# 安装系统依赖\nRUN apk add --no-cache python3 make g++\n\n# 复制package文件\nCOPY client/package*.json ./\n\n# 安装依赖\nRUN npm ci --silent\n\n# 复制源代码\nCOPY client/ .\n\n# 构建参数\nARG REACT_APP_API_BASE_URL=https://yourdomain.com/api\nARG REACT_APP_WECHAT_REDIRECT_URL=https://yourdomain.com/wechat/callback\n\n# 设置环境变量\nENV REACT_APP_API_BASE_URL=$REACT_APP_API_BASE_URL\nENV REACT_APP_WECHAT_REDIRECT_URL=$REACT_APP_WECHAT_REDIRECT_URL\nENV NODE_ENV=production\nENV GENERATE_SOURCEMAP=false\nENV CI=true\n\n# 构建应用\nRUN npm run build\n\n# 清理构建缓存\nRUN rm -rf node_modules src public package*.json\n\n# ====================================\n# 生产运行阶段\n# ====================================\nFROM nginx:1.24-alpine AS production\n\n# 安装必要工具\nRUN apk add --no-cache curl\n\n# 创建nginx用户和组（如果不存在）\nRUN addgroup -g 101 -S nginx 2>/dev/null || true\nRUN adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx 2>/dev/null || true\n\n# 复制构建产物\nCOPY --from=build /app/build /usr/share/nginx/html\n\n# 创建nginx配置\nRUN cat > /etc/nginx/conf.d/default.conf << 'EOF'\nserver {\n    listen 80;\n    server_name localhost;\n    root /usr/share/nginx/html;\n    index index.html index.htm;\n    \n    # Gzip压缩\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n    \n    # 安全头\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n    \n    # 静态资源缓存\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        add_header X-Frame-Options \"SAMEORIGIN\" always;\n        add_header X-XSS-Protection \"1; mode=block\" always;\n        add_header X-Content-Type-Options \"nosniff\" always;\n    }\n    \n    # HTML文件不缓存\n    location ~* \\.(html|htm)$ {\n        expires -1;\n        add_header Cache-Control \"no-cache, no-store, must-revalidate\";\n        add_header Pragma \"no-cache\";\n    }\n    \n    # React Router支持\n    location / {\n        try_files $uri $uri/ /index.html;\n        add_header X-Frame-Options \"SAMEORIGIN\" always;\n        add_header X-XSS-Protection \"1; mode=block\" always;\n        add_header X-Content-Type-Options \"nosniff\" always;\n    }\n    \n    # 健康检查端点\n    location /health {\n        access_log off;\n        return 200 \"healthy\\n\";\n        add_header Content-Type text/plain;\n    }\n    \n    # 隐藏nginx版本\n    server_tokens off;\n    \n    # 防止访问隐藏文件\n    location ~ /\\. {\n        deny all;\n        return 404;\n    }\n    \n    # 防止访问源码文件\n    location ~* \\.(md|json|lock|txt)$ {\n        deny all;\n        return 404;\n    }\n    \n    # 错误页面\n    error_page 404 /index.html;\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\nEOF\n\n# 优化nginx配置\nRUN cat > /etc/nginx/nginx.conf << 'EOF'\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log notice;\npid /var/run/nginx.pid;\n\n# 性能优化\nworker_rlimit_nofile 65535;\n\nevents {\n    worker_connections 1024;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    \n    # 日志格式\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\" '\n                    'rt=$request_time uct=\"$upstream_connect_time\" '\n                    'uht=\"$upstream_header_time\" urt=\"$upstream_response_time\"';\n    \n    access_log /var/log/nginx/access.log main;\n    \n    # 性能设置\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    client_max_body_size 16M;\n    \n    # Gzip设置\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_min_length 1000;\n    gzip_types\n        application/atom+xml\n        application/javascript\n        application/json\n        application/ld+json\n        application/manifest+json\n        application/rss+xml\n        application/vnd.geo+json\n        application/vnd.ms-fontobject\n        application/x-font-ttf\n        application/x-web-app-manifest+json\n        application/xhtml+xml\n        application/xml\n        font/opentype\n        image/bmp\n        image/svg+xml\n        image/x-icon\n        text/cache-manifest\n        text/css\n        text/plain\n        text/vcard\n        text/vnd.rim.location.xloc\n        text/vtt\n        text/x-component\n        text/x-cross-domain-policy;\n    \n    # 安全设置\n    server_tokens off;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    \n    include /etc/nginx/conf.d/*.conf;\n}\nEOF\n\n# 创建健康检查目录和文件\nRUN echo \"healthy\" > /usr/share/nginx/html/health.txt\n\n# 设置权限\nRUN chown -R nginx:nginx /usr/share/nginx/html \\\n    && chmod -R 755 /usr/share/nginx/html\n\n# 暴露端口\nEXPOSE 80\n\n# 健康检查\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:80/health || exit 1\n\n# 启动nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]