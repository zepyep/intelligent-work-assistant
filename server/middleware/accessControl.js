const jwt = require('jsonwebtoken');\nconst User = require('../models/User');\nconst encryptionService = require('../services/encryptionService');\n\n/**\n * 访问控制和权限管理中间件\n */\n\n// 权限级别定义\nconst PERMISSIONS = {\n  // 系统权限\n  SYSTEM_ADMIN: 'system:admin',\n  SYSTEM_CONFIG: 'system:config',\n  SYSTEM_MONITOR: 'system:monitor',\n  \n  // 用户管理权限\n  USER_READ: 'user:read',\n  USER_WRITE: 'user:write',\n  USER_DELETE: 'user:delete',\n  USER_ADMIN: 'user:admin',\n  \n  // 任务权限\n  TASK_READ: 'task:read',\n  TASK_WRITE: 'task:write',\n  TASK_DELETE: 'task:delete',\n  TASK_ASSIGN: 'task:assign',\n  \n  // 文档权限\n  DOCUMENT_READ: 'document:read',\n  DOCUMENT_WRITE: 'document:write',\n  DOCUMENT_DELETE: 'document:delete',\n  DOCUMENT_SHARE: 'document:share',\n  \n  // 会议权限\n  MEETING_READ: 'meeting:read',\n  MEETING_WRITE: 'meeting:write',\n  MEETING_DELETE: 'meeting:delete',\n  MEETING_MANAGE: 'meeting:manage',\n  \n  // AI功能权限\n  AI_USE: 'ai:use',\n  AI_ADMIN: 'ai:admin',\n  \n  // WeChat权限\n  WECHAT_USE: 'wechat:use',\n  WECHAT_ADMIN: 'wechat:admin',\n  \n  // 通知权限\n  NOTIFICATION_READ: 'notification:read',\n  NOTIFICATION_SEND: 'notification:send',\n  NOTIFICATION_ADMIN: 'notification:admin'\n};\n\n// 角色权限映射\nconst ROLE_PERMISSIONS = {\n  super_admin: [\n    PERMISSIONS.SYSTEM_ADMIN,\n    PERMISSIONS.SYSTEM_CONFIG,\n    PERMISSIONS.SYSTEM_MONITOR,\n    PERMISSIONS.USER_ADMIN,\n    PERMISSIONS.AI_ADMIN,\n    PERMISSIONS.WECHAT_ADMIN,\n    PERMISSIONS.NOTIFICATION_ADMIN,\n    ...Object.values(PERMISSIONS)\n  ],\n  admin: [\n    PERMISSIONS.SYSTEM_MONITOR,\n    PERMISSIONS.USER_READ,\n    PERMISSIONS.USER_WRITE,\n    PERMISSIONS.TASK_READ,\n    PERMISSIONS.TASK_WRITE,\n    PERMISSIONS.TASK_DELETE,\n    PERMISSIONS.TASK_ASSIGN,\n    PERMISSIONS.DOCUMENT_READ,\n    PERMISSIONS.DOCUMENT_WRITE,\n    PERMISSIONS.DOCUMENT_DELETE,\n    PERMISSIONS.DOCUMENT_SHARE,\n    PERMISSIONS.MEETING_READ,\n    PERMISSIONS.MEETING_WRITE,\n    PERMISSIONS.MEETING_DELETE,\n    PERMISSIONS.MEETING_MANAGE,\n    PERMISSIONS.AI_USE,\n    PERMISSIONS.WECHAT_USE,\n    PERMISSIONS.NOTIFICATION_READ,\n    PERMISSIONS.NOTIFICATION_SEND\n  ],\n  manager: [\n    PERMISSIONS.USER_READ,\n    PERMISSIONS.TASK_READ,\n    PERMISSIONS.TASK_WRITE,\n    PERMISSIONS.TASK_ASSIGN,\n    PERMISSIONS.DOCUMENT_READ,\n    PERMISSIONS.DOCUMENT_WRITE,\n    PERMISSIONS.DOCUMENT_SHARE,\n    PERMISSIONS.MEETING_READ,\n    PERMISSIONS.MEETING_WRITE,\n    PERMISSIONS.MEETING_MANAGE,\n    PERMISSIONS.AI_USE,\n    PERMISSIONS.WECHAT_USE,\n    PERMISSIONS.NOTIFICATION_READ,\n    PERMISSIONS.NOTIFICATION_SEND\n  ],\n  user: [\n    PERMISSIONS.USER_READ, // 只能读取自己的信息\n    PERMISSIONS.TASK_READ,\n    PERMISSIONS.TASK_WRITE, // 只能操作自己的任务\n    PERMISSIONS.DOCUMENT_READ,\n    PERMISSIONS.DOCUMENT_WRITE, // 只能操作自己的文档\n    PERMISSIONS.MEETING_READ,\n    PERMISSIONS.MEETING_WRITE, // 只能操作自己参与的会议\n    PERMISSIONS.AI_USE,\n    PERMISSIONS.WECHAT_USE,\n    PERMISSIONS.NOTIFICATION_READ\n  ]\n};\n\n// 资源所有权检查\nconst RESOURCE_OWNERSHIP = {\n  task: 'createdBy',\n  document: 'uploadedBy',\n  meeting: 'createdBy',\n  notification: 'recipientId'\n};\n\n/**\n * JWT Token验证中间件\n */\nconst authenticateToken = async (req, res, next) => {\n  try {\n    let token = req.headers.authorization;\n    \n    if (!token) {\n      return res.status(401).json({\n        success: false,\n        error: '访问令牌缺失',\n        code: 'TOKEN_MISSING'\n      });\n    }\n    \n    // 提取Bearer token\n    if (token.startsWith('Bearer ')) {\n      token = token.slice(7);\n    }\n    \n    // 验证JWT\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    \n    // 获取用户信息\n    const user = await User.findById(decoded.userId).select('-password');\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        error: '用户不存在',\n        code: 'USER_NOT_FOUND'\n      });\n    }\n    \n    // 检查用户是否被禁用\n    if (!user.isActive) {\n      return res.status(401).json({\n        success: false,\n        error: '用户账号已被禁用',\n        code: 'USER_DISABLED'\n      });\n    }\n    \n    // 将用户信息附加到请求对象\n    req.user = user;\n    req.token = token;\n    \n    next();\n  } catch (error) {\n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        success: false,\n        error: '访问令牌已过期',\n        code: 'TOKEN_EXPIRED'\n      });\n    }\n    \n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({\n        success: false,\n        error: '无效的访问令牌',\n        code: 'INVALID_TOKEN'\n      });\n    }\n    \n    return res.status(500).json({\n      success: false,\n      error: '认证验证失败',\n      code: 'AUTH_ERROR'\n    });\n  }\n};\n\n/**\n * 权限检查中间件工厂\n * @param {string|array} requiredPermissions 所需权限\n * @param {object} options 额外选项\n */\nconst requirePermissions = (requiredPermissions, options = {}) => {\n  const permissions = Array.isArray(requiredPermissions) ? \n    requiredPermissions : [requiredPermissions];\n  \n  return async (req, res, next) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({\n          success: false,\n          error: '用户未认证',\n          code: 'USER_NOT_AUTHENTICATED'\n        });\n      }\n      \n      const userPermissions = ROLE_PERMISSIONS[req.user.role] || [];\n      \n      // 检查是否有所需权限\n      const hasPermission = permissions.every(permission => \n        userPermissions.includes(permission)\n      );\n      \n      if (!hasPermission) {\n        return res.status(403).json({\n          success: false,\n          error: '权限不足',\n          code: 'INSUFFICIENT_PERMISSIONS',\n          requiredPermissions: permissions\n        });\n      }\n      \n      // 资源所有权检查\n      if (options.checkOwnership) {\n        const resourceType = options.resourceType;\n        const resourceId = req.params.id || req.params[`${resourceType}Id`];\n        \n        if (resourceId && !await checkResourceOwnership(req.user, resourceType, resourceId)) {\n          return res.status(403).json({\n            success: false,\n            error: '无权访问此资源',\n            code: 'RESOURCE_ACCESS_DENIED'\n          });\n        }\n      }\n      \n      next();\n    } catch (error) {\n      return res.status(500).json({\n        success: false,\n        error: '权限检查失败',\n        code: 'PERMISSION_CHECK_ERROR'\n      });\n    }\n  };\n};\n\n/**\n * 角色检查中间件\n * @param {string|array} allowedRoles 允许的角色\n */\nconst requireRole = (allowedRoles) => {\n  const roles = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];\n  \n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({\n        success: false,\n        error: '用户未认证',\n        code: 'USER_NOT_AUTHENTICATED'\n      });\n    }\n    \n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({\n        success: false,\n        error: '角色权限不足',\n        code: 'ROLE_ACCESS_DENIED',\n        requiredRoles: roles,\n        userRole: req.user.role\n      });\n    }\n    \n    next();\n  };\n};\n\n/**\n * 检查资源所有权\n * @param {object} user 用户对象\n * @param {string} resourceType 资源类型\n * @param {string} resourceId 资源ID\n */\nconst checkResourceOwnership = async (user, resourceType, resourceId) => {\n  try {\n    // 管理员和超级管理员可以访问所有资源\n    if (['admin', 'super_admin'].includes(user.role)) {\n      return true;\n    }\n    \n    const ownershipField = RESOURCE_OWNERSHIP[resourceType];\n    if (!ownershipField) {\n      return false;\n    }\n    \n    // 动态导入相关模型\n    let Model;\n    switch (resourceType) {\n      case 'task':\n        Model = require('../models/Task');\n        break;\n      case 'document':\n        Model = require('../models/Document');\n        break;\n      case 'meeting':\n        Model = require('../models/Meeting');\n        break;\n      case 'notification':\n        Model = require('../models/Notification');\n        break;\n      default:\n        return false;\n    }\n    \n    const resource = await Model.findById(resourceId);\n    if (!resource) {\n      return false;\n    }\n    \n    return resource[ownershipField].toString() === user._id.toString();\n  } catch (error) {\n    console.error('资源所有权检查错误:', error);\n    return false;\n  }\n};\n\n/**\n * 会话管理中间件\n */\nconst sessionManager = {\n  // 创建会话\n  createSession: (req, res, next) => {\n    const sessionId = encryptionService.generateSessionId();\n    req.sessionId = sessionId;\n    \n    // 设置会话cookie\n    res.cookie('sessionId', sessionId, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 24 * 60 * 60 * 1000, // 24小时\n      sameSite: 'strict'\n    });\n    \n    next();\n  },\n  \n  // 验证会话\n  validateSession: (req, res, next) => {\n    const sessionId = req.cookies.sessionId || req.headers['x-session-id'];\n    \n    if (!sessionId) {\n      return res.status(401).json({\n        success: false,\n        error: '会话ID缺失',\n        code: 'SESSION_MISSING'\n      });\n    }\n    \n    // 这里可以添加会话存储验证逻辑（Redis等）\n    req.sessionId = sessionId;\n    next();\n  },\n  \n  // 清除会话\n  clearSession: (req, res, next) => {\n    res.clearCookie('sessionId');\n    next();\n  }\n};\n\n/**\n * API访问日志中间件\n */\nconst auditLogger = (req, res, next) => {\n  const startTime = Date.now();\n  \n  // 记录请求信息\n  const logData = {\n    timestamp: new Date().toISOString(),\n    method: req.method,\n    path: req.path,\n    ip: req.ip || req.connection.remoteAddress,\n    userAgent: req.get('User-Agent'),\n    userId: req.user?.id,\n    sessionId: req.sessionId\n  };\n  \n  // 监听响应完成\n  res.on('finish', () => {\n    logData.statusCode = res.statusCode;\n    logData.responseTime = Date.now() - startTime;\n    \n    // 记录敏感操作\n    const sensitivePaths = ['/api/auth', '/api/admin', '/api/wechat-admin'];\n    const isSensitiveOperation = sensitivePaths.some(path => req.path.startsWith(path)) ||\n      ['POST', 'PUT', 'DELETE'].includes(req.method);\n    \n    if (isSensitiveOperation || res.statusCode >= 400) {\n      console.log('🔍 API访问日志:', JSON.stringify(logData, null, 2));\n    }\n  });\n  \n  next();\n};\n\n/**\n * 获取用户权限列表\n * @param {object} user 用户对象\n * @returns {array} 权限列表\n */\nconst getUserPermissions = (user) => {\n  return ROLE_PERMISSIONS[user.role] || [];\n};\n\n/**\n * 检查用户是否有特定权限\n * @param {object} user 用户对象\n * @param {string} permission 权限\n * @returns {boolean} 是否有权限\n */\nconst hasPermission = (user, permission) => {\n  const userPermissions = getUserPermissions(user);\n  return userPermissions.includes(permission);\n};\n\n/**\n * 权限中间件组合器\n * @param {object} options 配置选项\n */\nconst createPermissionMiddleware = (options) => {\n  const middlewares = [];\n  \n  // 认证检查\n  if (!options.skipAuth) {\n    middlewares.push(authenticateToken);\n  }\n  \n  // 权限检查\n  if (options.permissions) {\n    middlewares.push(requirePermissions(options.permissions, {\n      checkOwnership: options.checkOwnership,\n      resourceType: options.resourceType\n    }));\n  }\n  \n  // 角色检查\n  if (options.roles) {\n    middlewares.push(requireRole(options.roles));\n  }\n  \n  // 审计日志\n  if (options.auditLog) {\n    middlewares.push(auditLogger);\n  }\n  \n  return middlewares;\n};\n\nmodule.exports = {\n  // 权限常量\n  PERMISSIONS,\n  ROLE_PERMISSIONS,\n  \n  // 中间件函数\n  authenticateToken,\n  requirePermissions,\n  requireRole,\n  sessionManager,\n  auditLogger,\n  \n  // 工具函数\n  checkResourceOwnership,\n  getUserPermissions,\n  hasPermission,\n  createPermissionMiddleware\n};"