#!/usr/bin/env node\n\n/**\n * 微信公众号生产环境配置检查脚本\n * 用于验证生产环境的微信配置是否正确\n */\n\nconst WechatProductionConfig = require('../config/wechat-production');\nconst crypto = require('crypto');\n\nclass WechatProductionChecker {\n  constructor() {\n    this.wechatConfig = new WechatProductionConfig();\n    this.results = {\n      overall: false,\n      checks: []\n    };\n  }\n\n  /**\n   * 执行所有检查\n   */\n  async runAllChecks() {\n    console.log('\\n🔍 微信公众号生产环境配置检查\\n');\n    \n    await this.checkBasicConfig();\n    await this.checkEnvironmentVariables();\n    await this.checkWebhookURL();\n    await this.checkMenuConfiguration();\n    \n    this.printSummary();\n    this.generateReport();\n    \n    return this.results;\n  }\n\n  /**\n   * 检查基本配置\n   */\n  async checkBasicConfig() {\n    const check = {\n      name: '基本配置检查',\n      status: 'checking',\n      details: []\n    };\n    \n    try {\n      const validation = this.wechatConfig.validateConfig();\n      const status = this.wechatConfig.getConfigStatus();\n      \n      if (validation.valid) {\n        check.status = 'passed';\n        check.details.push('✅ 所有必要配置项已完成');\n        check.details.push(`✅ AppID: ${status.appId}`);\n        check.details.push(`✅ AppSecret: ${status.appSecret}`);\n        check.details.push(`✅ Token: ${status.token}`);\n        \n        if (status.encodingAESKey !== '未配置') {\n          check.details.push(`✅ EncodingAESKey: ${status.encodingAESKey}`);\n        }\n        \n        this.logPass(check.name);\n      } else {\n        check.status = 'failed';\n        check.details.push(`❌ 配置验证失败: ${validation.message}`);\n        \n        if (validation.missingFields) {\n          validation.missingFields.forEach(field => {\n            check.details.push(`❌ 缺少配置: ${field}`);\n          });\n        }\n        \n        this.logError(check.name, validation.message);\n      }\n    } catch (error) {\n      check.status = 'error';\n      check.details.push(`💥 检查过程中发生错误: ${error.message}`);\n      this.logError(check.name, error.message);\n    }\n    \n    this.results.checks.push(check);\n  }\n\n  /**\n   * 检查环境变量\n   */\n  async checkEnvironmentVariables() {\n    const check = {\n      name: '环境变量检查',\n      status: 'checking',\n      details: []\n    };\n    \n    const envVars = {\n      'WECHAT_APPID': process.env.WECHAT_APPID || process.env.WECHAT_APP_ID,\n      'WECHAT_APPSECRET': process.env.WECHAT_APPSECRET || process.env.WECHAT_APP_SECRET,\n      'WECHAT_TOKEN': process.env.WECHAT_TOKEN,\n      'BASE_URL': process.env.BASE_URL,\n      'NODE_ENV': process.env.NODE_ENV\n    };\n    \n    let allPassed = true;\n    \n    Object.entries(envVars).forEach(([key, value]) => {\n      if (value) {\n        check.details.push(`✅ ${key}: 已设置`);\n      } else {\n        if (key !== 'BASE_URL') {  // BASE_URL是可选的\n          check.details.push(`❌ ${key}: 未设置`);\n          allPassed = false;\n        } else {\n          check.details.push(`⚠️  ${key}: 未设置 (可选)`);\n        }\n      }\n    });\n    \n    // 检查生产环境特定配置\n    if (process.env.NODE_ENV === 'production') {\n      if (!process.env.WECHAT_CONFIG_KEY) {\n        check.details.push('⚠️  WECHAT_CONFIG_KEY: 建议设置独立的配置加密密钥');\n      } else {\n        check.details.push('✅ WECHAT_CONFIG_KEY: 已设置');\n      }\n    }\n    \n    check.status = allPassed ? 'passed' : 'failed';\n    \n    if (allPassed) {\n      this.logPass(check.name);\n    } else {\n      this.logError(check.name, '部分环境变量未设置');\n    }\n    \n    this.results.checks.push(check);\n  }\n\n  /**\n   * 检查Webhook URL\n   */\n  async checkWebhookURL() {\n    const check = {\n      name: 'Webhook URL检查',\n      status: 'checking',\n      details: []\n    };\n    \n    const config = this.wechatConfig.config;\n    const webhookUrl = config.serverUrl;\n    \n    if (!webhookUrl) {\n      check.status = 'failed';\n      check.details.push('❌ Webhook URL未配置');\n      this.logError(check.name, 'URL未配置');\n      this.results.checks.push(check);\n      return;\n    }\n    \n    check.details.push(`✅ URL已配置: ${webhookUrl}`);\n    check.status = 'passed';\n    this.logPass(check.name);\n    \n    this.results.checks.push(check);\n  }\n\n  /**\n   * 检查菜单配置\n   */\n  async checkMenuConfiguration() {\n    const check = {\n      name: '菜单配置检查',\n      status: 'checking',\n      details: []\n    };\n    \n    const config = this.wechatConfig.config;\n    \n    if (config.menuConfig) {\n      check.details.push('✅ 自定义菜单配置存在');\n      \n      const menuConfig = config.menuConfig;\n      if (menuConfig.button && Array.isArray(menuConfig.button)) {\n        check.details.push(`✅ 菜单按钮数量: ${menuConfig.button.length}`);\n        \n        menuConfig.button.forEach((button, index) => {\n          check.details.push(`✅ 菜单${index + 1}: ${button.name}`);\n          if (button.sub_button) {\n            check.details.push(`   └─ 子菜单数量: ${button.sub_button.length}`);\n          }\n        });\n        \n        check.status = 'passed';\n        this.logPass(check.name);\n      } else {\n        check.status = 'failed';\n        check.details.push('❌ 菜单配置格式错误');\n        this.logError(check.name, '菜单格式错误');\n      }\n    } else {\n      check.status = 'warning';\n      check.details.push('⚠️  未配置自定义菜单（将使用默认菜单）');\n      this.logWarning(check.name, '使用默认菜单');\n    }\n    \n    this.results.checks.push(check);\n  }\n\n  /**\n   * 打印检查结果摘要\n   */\n  printSummary() {\n    console.log('\\n📊 检查结果摘要\\n');\n    \n    const passed = this.results.checks.filter(c => c.status === 'passed').length;\n    const failed = this.results.checks.filter(c => c.status === 'failed').length;\n    const errors = this.results.checks.filter(c => c.status === 'error').length;\n    const warnings = this.results.checks.filter(c => c.status === 'warning').length;\n    \n    console.log(`✅ 通过: ${passed}`);\n    console.log(`❌ 失败: ${failed}`);\n    console.log(`💥 错误: ${errors}`);\n    console.log(`⚠️  警告: ${warnings}`);\n    \n    this.results.overall = failed === 0 && errors === 0;\n    \n    if (this.results.overall) {\n      console.log('\\n🎉 所有检查通过！微信公众号配置就绪\\n');\n    } else {\n      console.log('\\n⚠️  存在配置问题，需要修复后才能正常使用\\n');\n    }\n  }\n\n  /**\n   * 生成详细报告\n   */\n  generateReport() {\n    const report = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || 'development',\n      overall: this.results.overall,\n      summary: {\n        total: this.results.checks.length,\n        passed: this.results.checks.filter(c => c.status === 'passed').length,\n        failed: this.results.checks.filter(c => c.status === 'failed').length,\n        errors: this.results.checks.filter(c => c.status === 'error').length,\n        warnings: this.results.checks.filter(c => c.status === 'warning').length\n      },\n      checks: this.results.checks,\n      recommendations: this.getRecommendations()\n    };\n    \n    const fs = require('fs');\n    const path = require('path');\n    const reportPath = path.join(__dirname, '../data/wechat-check-report.json');\n    \n    // 确保目录存在\n    const dir = path.dirname(reportPath);\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n    \n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n    console.log(`📄 详细报告已保存到: ${reportPath}`);\n  }\n\n  /**\n   * 获取修复建议\n   */\n  getRecommendations() {\n    const recommendations = [];\n    \n    this.results.checks.forEach(check => {\n      if (check.status === 'failed' || check.status === 'error') {\n        switch (check.name) {\n          case '基本配置检查':\n            recommendations.push('请完成微信公众号的基本配置（AppID、AppSecret、Token）');\n            recommendations.push('参考文档: docs/wechat-setup-guide.md');\n            break;\n          case '环境变量检查':\n            recommendations.push('请设置相应的环境变量或使用配置管理界面');\n            break;\n          case 'Webhook URL检查':\n            recommendations.push('请确保服务器URL可被外网访问');\n            recommendations.push('请在微信公众平台配置正确的服务器地址');\n            break;\n        }\n      }\n    });\n    \n    return recommendations;\n  }\n\n  // 日志输出方法\n  logPass(checkName) {\n    console.log(`✅ ${checkName} - 通过`);\n  }\n  \n  logError(checkName, message) {\n    console.log(`❌ ${checkName} - 失败: ${message}`);\n  }\n  \n  logWarning(checkName, message) {\n    console.log(`⚠️  ${checkName} - 警告: ${message}`);\n  }\n}\n\n// 如果直接运行此脚本\nif (require.main === module) {\n  const checker = new WechatProductionChecker();\n  \n  checker.runAllChecks().then((results) => {\n    process.exit(results.overall ? 0 : 1);\n  }).catch((error) => {\n    console.error('检查过程中发生错误:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = WechatProductionChecker;