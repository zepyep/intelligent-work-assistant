require('dotenv').config();\n\n/**\n * 安全配置文件\n * 集中管理所有安全相关的配置\n */\n\nmodule.exports = {\n  // JWT配置\n  jwt: {\n    secret: process.env.JWT_SECRET || 'intelligent-work-assistant-jwt-secret',\n    expiresIn: process.env.JWT_EXPIRES_IN || '24h',\n    refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '7d',\n    algorithm: 'HS256'\n  },\n\n  // 加密配置\n  encryption: {\n    secret: process.env.ENCRYPTION_SECRET,\n    userDataKey: process.env.USER_DATA_KEY,\n    wechatKey: process.env.WECHAT_ENCRYPTION_KEY,\n    apiTokenKey: process.env.API_TOKEN_KEY\n  },\n\n  // 密码策略\n  password: {\n    minLength: parseInt(process.env.PASSWORD_MIN_LENGTH) || 8,\n    requireNumbers: process.env.PASSWORD_REQUIRE_NUMBERS === 'true',\n    requireUppercase: process.env.PASSWORD_REQUIRE_UPPERCASE === 'true',\n    requireLowercase: process.env.PASSWORD_REQUIRE_LOWERCASE === 'true',\n    requireSymbols: process.env.PASSWORD_REQUIRE_SYMBOLS === 'true',\n    maxAttempts: parseInt(process.env.PASSWORD_MAX_ATTEMPTS) || 5,\n    lockoutDuration: parseInt(process.env.PASSWORD_LOCKOUT_DURATION) || 900 // 15分钟\n  },\n\n  // 会话配置\n  session: {\n    secret: process.env.SESSION_SECRET || 'intelligent-work-assistant-session',\n    maxAge: parseInt(process.env.SESSION_MAX_AGE) || 24 * 60 * 60 * 1000, // 24小时\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    sameSite: 'strict'\n  },\n\n  // 速率限制配置\n  rateLimit: {\n    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000, // 15分钟\n    maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100,\n    skipSuccessfulRequests: false,\n    \n    // 特定端点的限制\n    endpoints: {\n      auth: {\n        windowMs: 15 * 60 * 1000, // 15分钟\n        maxRequests: 20\n      },\n      upload: {\n        windowMs: 60 * 60 * 1000, // 1小时\n        maxRequests: 50\n      },\n      ai: {\n        windowMs: 60 * 60 * 1000, // 1小时\n        maxRequests: 100\n      },\n      sensitive: {\n        windowMs: 15 * 60 * 1000, // 15分钟\n        maxRequests: 5\n      }\n    }\n  },\n\n  // CORS配置\n  cors: {\n    origin: process.env.CLIENT_URL || 'http://localhost:3000',\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    allowedHeaders: [\n      'Content-Type', \n      'Authorization', \n      'X-Requested-With',\n      'X-API-Key',\n      'X-CSRF-Token',\n      'X-Session-Id'\n    ],\n    exposedHeaders: ['X-Total-Count', 'X-Rate-Limit-Remaining']\n  },\n\n  // CSP (Content Security Policy) 配置\n  csp: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\", 'https://fonts.googleapis.com'],\n      fontSrc: [\"'self'\", 'https://fonts.gstatic.com'],\n      imgSrc: [\"'self'\", 'data:', 'https:'],\n      scriptSrc: [\"'self'\"],\n      connectSrc: [\"'self'\"],\n      frameSrc: [\"'none'\"],\n      objectSrc: [\"'none'\"],\n      upgradeInsecureRequests: process.env.NODE_ENV === 'production' ? [] : null\n    }\n  },\n\n  // HTTPS配置（生产环境）\n  https: {\n    enabled: process.env.HTTPS_ENABLED === 'true',\n    force: process.env.FORCE_HTTPS === 'true',\n    hsts: {\n      maxAge: 31536000, // 1年\n      includeSubDomains: true,\n      preload: true\n    }\n  },\n\n  // IP白名单配置\n  ipWhitelist: {\n    enabled: process.env.ENABLE_IP_WHITELIST === 'true',\n    ips: process.env.ALLOWED_IPS ? \n      process.env.ALLOWED_IPS.split(',').map(ip => ip.trim()) : \n      ['127.0.0.1', '::1']\n  },\n\n  // 文件上传安全配置\n  fileUpload: {\n    maxFileSize: parseInt(process.env.MAX_FILE_SIZE) || 20 * 1024 * 1024, // 20MB\n    allowedTypes: {\n      images: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n      documents: [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'text/plain',\n        'text/markdown'\n      ],\n      audio: [\n        'audio/mpeg',\n        'audio/wav',\n        'audio/mp4',\n        'audio/x-m4a'\n      ]\n    },\n    scanForVirus: process.env.ENABLE_VIRUS_SCAN === 'true',\n    quarantinePath: process.env.QUARANTINE_PATH || './quarantine'\n  },\n\n  // API密钥配置\n  apiKeys: {\n    adminKeys: process.env.ADMIN_API_KEYS ? \n      process.env.ADMIN_API_KEYS.split(',').map(key => key.trim()) : \n      [],\n    wechatWebhookKey: process.env.WECHAT_WEBHOOK_KEY,\n    systemKeys: process.env.SYSTEM_API_KEYS ? \n      process.env.SYSTEM_API_KEYS.split(',').map(key => key.trim()) : \n      []\n  },\n\n  // 安全头部配置\n  headers: {\n    // 禁用X-Powered-By头\n    hidePoweredBy: true,\n    \n    // 防止点击劫持\n    frameGuard: {\n      action: 'deny'\n    },\n    \n    // 防止MIME类型嗅探\n    noSniff: true,\n    \n    // XSS保护\n    xssFilter: {\n      setOnOldIE: true\n    },\n    \n    // 引用策略\n    referrerPolicy: {\n      policy: 'same-origin'\n    },\n    \n    // 权限策略\n    permissionsPolicy: {\n      features: {\n        camera: [],\n        microphone: [],\n        geolocation: [],\n        payment: []\n      }\n    }\n  },\n\n  // 数据库安全配置\n  database: {\n    // 连接加密\n    ssl: process.env.DB_SSL === 'true',\n    \n    // 查询超时\n    queryTimeout: parseInt(process.env.DB_QUERY_TIMEOUT) || 30000,\n    \n    // 连接池配置\n    poolSize: parseInt(process.env.DB_POOL_SIZE) || 10,\n    \n    // 敏感数据加密\n    encryptSensitiveFields: true,\n    \n    // 数据备份加密\n    backupEncryption: process.env.BACKUP_ENCRYPTION === 'true'\n  },\n\n  // 日志安全配置\n  logging: {\n    // 敏感信息过滤\n    filterSensitiveData: true,\n    \n    // 敏感字段列表\n    sensitiveFields: [\n      'password',\n      'token',\n      'secret',\n      'key',\n      'authorization',\n      'cookie',\n      'x-api-key'\n    ],\n    \n    // 日志加密\n    encryptLogs: process.env.ENCRYPT_LOGS === 'true',\n    \n    // 审计日志\n    auditLog: {\n      enabled: process.env.ENABLE_AUDIT_LOG === 'true',\n      sensitiveOperations: [\n        'login',\n        'logout',\n        'password-change',\n        'admin-action',\n        'data-export',\n        'user-deletion'\n      ]\n    }\n  },\n\n  // 安全监控配置\n  monitoring: {\n    // 异常检测\n    anomalyDetection: {\n      enabled: process.env.ENABLE_ANOMALY_DETECTION === 'true',\n      maxRequestsPerMinute: 60,\n      maxFailedAttempts: 10,\n      suspiciousPatterns: [\n        'sql injection',\n        'xss attack',\n        'brute force',\n        'path traversal'\n      ]\n    },\n    \n    // 入侵检测\n    intrusionDetection: {\n      enabled: process.env.ENABLE_INTRUSION_DETECTION === 'true',\n      blockDuration: 24 * 60 * 60 * 1000, // 24小时\n      alertThreshold: 5\n    },\n    \n    // 实时告警\n    alerting: {\n      enabled: process.env.ENABLE_SECURITY_ALERTS === 'true',\n      webhookUrl: process.env.SECURITY_ALERT_WEBHOOK,\n      emailAlerts: process.env.SECURITY_ALERT_EMAIL,\n      severityLevels: ['low', 'medium', 'high', 'critical']\n    }\n  },\n\n  // 生产环境特定配置\n  production: {\n    // 强制HTTPS\n    forceHttps: true,\n    \n    // 隐藏错误详情\n    hideErrorDetails: true,\n    \n    // 启用所有安全功能\n    enableAllSecurity: true,\n    \n    // 性能监控\n    performanceMonitoring: true\n  },\n\n  // 开发环境配置\n  development: {\n    // 显示详细错误\n    showErrorDetails: true,\n    \n    // 允许不安全的操作（仅开发环境）\n    allowInsecureOperations: true,\n    \n    // 调试模式\n    debugMode: true\n  },\n\n  // 获取环境特定配置\n  getEnvironmentConfig() {\n    const env = process.env.NODE_ENV || 'development';\n    return this[env] || this.development;\n  },\n\n  // 验证安全配置\n  validateConfiguration() {\n    const warnings = [];\n    const errors = [];\n    \n    // 检查关键配置\n    if (!process.env.JWT_SECRET) {\n      errors.push('JWT_SECRET 环境变量未设置');\n    }\n    \n    if (!process.env.ENCRYPTION_SECRET) {\n      warnings.push('ENCRYPTION_SECRET 环境变量未设置，使用默认值');\n    }\n    \n    if (process.env.NODE_ENV === 'production') {\n      if (!this.https.enabled) {\n        warnings.push('生产环境建议启用HTTPS');\n      }\n      \n      if (!this.monitoring.anomalyDetection.enabled) {\n        warnings.push('生产环境建议启用异常检测');\n      }\n    }\n    \n    // 输出警告和错误\n    if (warnings.length > 0) {\n      console.warn('⚠️ 安全配置警告:');\n      warnings.forEach(warning => console.warn(`  - ${warning}`));\n    }\n    \n    if (errors.length > 0) {\n      console.error('❌ 安全配置错误:');\n      errors.forEach(error => console.error(`  - ${error}`));\n      throw new Error('安全配置错误，请检查环境变量');\n    }\n    \n    if (warnings.length === 0 && errors.length === 0) {\n      console.log('✅ 安全配置验证通过');\n    }\n  }\n};"