#!/bin/bash\n\n# 智能工作助手生产环境部署脚本\n# 版本: 1.0.0\n# 作者: Intelligent Work Assistant Team\n\nset -e  # 遇到错误立即退出\nset -u  # 使用未定义变量时报错\nset -o pipefail  # 管道中任何命令失败都会导致整个管道失败\n\n# 配置变量\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\nDEPLOY_DATE=$(date +\"%Y%m%d-%H%M%S\")\nBACKUP_DIR=\"/opt/iwa/backups\"\nDATA_DIR=\"/opt/iwa/data\"\nLOGS_DIR=\"/opt/iwa/logs\"\nENV_FILE=\".env.production\"\nDOCKER_COMPOSE_FILE=\"docker-compose.production.yml\"\n\n# 颜色输出\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# 日志函数\nlog_info() {\n    echo -e \"${BLUE}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1\"\n}\n\nlog_error() {\n    echo -e \"${RED}[ERROR]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1\"\n}\n\n# 错误处理\nhandle_error() {\n    log_error \"部署过程中发生错误，在第 $1 行\"\n    log_error \"正在执行回滚操作...\"\n    rollback_deployment\n    exit 1\n}\n\ntrap 'handle_error $LINENO' ERR\n\n# 检查依赖\ncheck_dependencies() {\n    log_info \"检查系统依赖...\"\n    \n    local deps=(\"docker\" \"docker-compose\" \"curl\" \"jq\" \"nginx\")\n    local missing_deps=()\n    \n    for dep in \"${deps[@]}\"; do\n        if ! command -v \"$dep\" &> /dev/null; then\n            missing_deps+=(\"$dep\")\n        fi\n    done\n    \n    if [ ${#missing_deps[@]} -ne 0 ]; then\n        log_error \"缺少以下依赖: ${missing_deps[*]}\"\n        log_info \"请先安装必要依赖后再执行部署\"\n        exit 1\n    fi\n    \n    log_success \"所有依赖检查通过\"\n}\n\n# 检查环境配置\ncheck_environment() {\n    log_info \"检查环境配置...\"\n    \n    cd \"$PROJECT_ROOT\"\n    \n    # 检查配置文件\n    if [ ! -f \"server/$ENV_FILE\" ]; then\n        log_error \"环境配置文件 server/$ENV_FILE 不存在\"\n        log_info \"请复制 server/.env.production.example 并配置相应参数\"\n        exit 1\n    fi\n    \n    # 检查Docker Compose文件\n    if [ ! -f \"$DOCKER_COMPOSE_FILE\" ]; then\n        log_error \"Docker Compose配置文件 $DOCKER_COMPOSE_FILE 不存在\"\n        exit 1\n    fi\n    \n    # 验证环境变量\n    source \"server/$ENV_FILE\"\n    \n    local required_vars=(\"MONGO_ROOT_PASSWORD\" \"REDIS_PASSWORD\" \"JWT_SECRET\" \n                        \"WECHAT_APPID\" \"WECHAT_APPSECRET\" \"WECHAT_TOKEN\")\n    local missing_vars=()\n    \n    for var in \"${required_vars[@]}\"; do\n        if [ -z \"${!var:-}\" ]; then\n            missing_vars+=(\"$var\")\n        fi\n    done\n    \n    if [ ${#missing_vars[@]} -ne 0 ]; then\n        log_error \"以下环境变量未设置: ${missing_vars[*]}\"\n        exit 1\n    fi\n    \n    log_success \"环境配置检查通过\"\n}\n\n# 创建必要目录\ncreate_directories() {\n    log_info \"创建必要的目录结构...\"\n    \n    local dirs=(\"$BACKUP_DIR\" \"$DATA_DIR/mongodb\" \"$DATA_DIR/redis\" \n                \"$DATA_DIR/uploads\" \"$DATA_DIR/app\" \"$DATA_DIR/prometheus\" \n                \"$DATA_DIR/grafana\" \"$DATA_DIR/loki\" \"$LOGS_DIR\" \n                \"$LOGS_DIR/nginx\")\n    \n    for dir in \"${dirs[@]}\"; do\n        if [ ! -d \"$dir\" ]; then\n            sudo mkdir -p \"$dir\"\n            log_info \"创建目录: $dir\"\n        fi\n    done\n    \n    # 设置正确的权限\n    sudo chown -R $(whoami):$(whoami) \"$DATA_DIR\" \"$LOGS_DIR\" \"$BACKUP_DIR\"\n    \n    log_success \"目录结构创建完成\"\n}\n\n# 备份现有数据\nbackup_existing_data() {\n    log_info \"备份现有数据...\"\n    \n    local backup_path=\"$BACKUP_DIR/pre-deploy-$DEPLOY_DATE\"\n    mkdir -p \"$backup_path\"\n    \n    # 备份数据库（如果存在）\n    if docker ps | grep -q \"iwa-mongodb-prod\"; then\n        log_info \"备份MongoDB数据...\"\n        docker exec iwa-mongodb-prod mongodump --out /tmp/backup\n        docker cp iwa-mongodb-prod:/tmp/backup \"$backup_path/mongodb\"\n    fi\n    \n    # 备份上传文件\n    if [ -d \"$DATA_DIR/uploads\" ] && [ \"$(ls -A $DATA_DIR/uploads)\" ]; then\n        log_info \"备份上传文件...\"\n        cp -r \"$DATA_DIR/uploads\" \"$backup_path/\"\n    fi\n    \n    # 备份应用数据\n    if [ -d \"$DATA_DIR/app\" ] && [ \"$(ls -A $DATA_DIR/app)\" ]; then\n        log_info \"备份应用数据...\"\n        cp -r \"$DATA_DIR/app\" \"$backup_path/\"\n    fi\n    \n    # 创建备份清单\n    echo \"Backup created at: $(date)\" > \"$backup_path/backup_info.txt\"\n    echo \"Deploy date: $DEPLOY_DATE\" >> \"$backup_path/backup_info.txt\"\n    echo \"Project version: $(git rev-parse HEAD 2>/dev/null || echo 'unknown')\" >> \"$backup_path/backup_info.txt\"\n    \n    log_success \"数据备份完成: $backup_path\"\n}\n\n# 停止现有服务\nstop_existing_services() {\n    log_info \"停止现有服务...\"\n    \n    cd \"$PROJECT_ROOT\"\n    \n    # 优雅停止Docker Compose服务\n    if [ -f \"$DOCKER_COMPOSE_FILE\" ]; then\n        docker-compose -f \"$DOCKER_COMPOSE_FILE\" down --timeout 30 || true\n    fi\n    \n    # 确保所有相关容器都已停止\n    local containers=($(docker ps --filter \"name=iwa-\" --format \"{{.Names}}\" || true))\n    if [ ${#containers[@]} -gt 0 ]; then\n        log_info \"停止残留容器: ${containers[*]}\"\n        docker stop \"${containers[@]}\" || true\n        docker rm \"${containers[@]}\" || true\n    fi\n    \n    log_success \"现有服务已停止\"\n}\n\n# 构建Docker镜像\nbuild_images() {\n    log_info \"构建Docker镜像...\"\n    \n    cd \"$PROJECT_ROOT\"\n    \n    # 拉取基础镜像更新\n    docker-compose -f \"$DOCKER_COMPOSE_FILE\" pull --quiet\n    \n    # 构建自定义镜像\n    docker-compose -f \"$DOCKER_COMPOSE_FILE\" build --no-cache\n    \n    log_success \"Docker镜像构建完成\"\n}\n\n# 启动服务\nstart_services() {\n    log_info \"启动服务...\"\n    \n    cd \"$PROJECT_ROOT\"\n    \n    # 启动服务\n    docker-compose -f \"$DOCKER_COMPOSE_FILE\" up -d\n    \n    log_info \"等待服务启动...\"\n    sleep 30\n    \n    # 检查服务状态\n    local services=(\"mongodb\" \"redis\" \"backend\" \"frontend\" \"nginx\")\n    for service in \"${services[@]}\"; do\n        if docker-compose -f \"$DOCKER_COMPOSE_FILE\" ps | grep -q \"iwa-${service}-prod.*Up\"; then\n            log_success \"$service 服务启动成功\"\n        else\n            log_error \"$service 服务启动失败\"\n            docker-compose -f \"$DOCKER_COMPOSE_FILE\" logs \"$service\"\n            exit 1\n        fi\n    done\n    \n    log_success \"所有服务启动完成\"\n}\n\n# 健康检查\nhealth_check() {\n    log_info \"执行健康检查...\"\n    \n    local max_attempts=30\n    local attempt=1\n    \n    # 检查后端健康状态\n    while [ $attempt -le $max_attempts ]; do\n        if curl -f http://localhost:5000/health > /dev/null 2>&1; then\n            log_success \"后端服务健康检查通过\"\n            break\n        fi\n        \n        if [ $attempt -eq $max_attempts ]; then\n            log_error \"后端服务健康检查失败\"\n            docker-compose -f \"$DOCKER_COMPOSE_FILE\" logs backend\n            exit 1\n        fi\n        \n        log_info \"等待后端服务启动... ($attempt/$max_attempts)\"\n        sleep 5\n        ((attempt++))\n    done\n    \n    # 检查前端服务\n    if curl -f http://localhost:3000 > /dev/null 2>&1; then\n        log_success \"前端服务健康检查通过\"\n    else\n        log_error \"前端服务健康检查失败\"\n        docker-compose -f \"$DOCKER_COMPOSE_FILE\" logs frontend\n        exit 1\n    fi\n    \n    # 检查Nginx\n    if curl -f http://localhost:80/health > /dev/null 2>&1; then\n        log_success \"Nginx服务健康检查通过\"\n    else\n        log_error \"Nginx服务健康检查失败\"\n        docker-compose -f \"$DOCKER_COMPOSE_FILE\" logs nginx\n        exit 1\n    fi\n}\n\n# 运行微信配置检查\nrun_wechat_check() {\n    log_info \"运行微信配置检查...\"\n    \n    # 在容器中运行检查脚本\n    if docker exec iwa-backend-prod node scripts/wechat-production-check.js; then\n        log_success \"微信配置检查通过\"\n    else\n        log_warning \"微信配置检查未通过，请检查微信相关配置\"\n    fi\n}\n\n# 清理旧镜像和容器\ncleanup_old_resources() {\n    log_info \"清理旧的Docker资源...\"\n    \n    # 清理无用镜像\n    docker image prune -f > /dev/null 2>&1 || true\n    \n    # 清理旧备份（保留最近7天）\n    find \"$BACKUP_DIR\" -type d -name \"pre-deploy-*\" -mtime +7 -exec rm -rf {} + 2>/dev/null || true\n    \n    log_success \"资源清理完成\"\n}\n\n# 更新系统服务（如systemd）\nupdate_system_services() {\n    log_info \"更新系统服务配置...\"\n    \n    # 创建systemd服务文件（如果不存在）\n    local service_file=\"/etc/systemd/system/intelligent-work-assistant.service\"\n    if [ ! -f \"$service_file\" ]; then\n        sudo tee \"$service_file\" > /dev/null <<EOF\n[Unit]\nDescription=Intelligent Work Assistant\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nWorkingDirectory=$PROJECT_ROOT\nExecStart=/usr/bin/docker-compose -f $DOCKER_COMPOSE_FILE up -d\nExecStop=/usr/bin/docker-compose -f $DOCKER_COMPOSE_FILE down\nTimeoutStartSec=0\n\n[Install]\nWantedBy=multi-user.target\nEOF\n        \n        sudo systemctl daemon-reload\n        sudo systemctl enable intelligent-work-assistant.service\n        log_success \"系统服务配置完成\"\n    fi\n}\n\n# 发送部署通知\nsend_notification() {\n    log_info \"发送部署完成通知...\"\n    \n    local webhook_url=\"${DEPLOY_WEBHOOK_URL:-}\"\n    if [ -n \"$webhook_url\" ]; then\n        curl -X POST \"$webhook_url\" \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\n                \\\"text\\\": \\\"🚀 智能工作助手部署完成\\\\n时间: $(date)\\\\n版本: $(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')\\\\n状态: 成功\\\"\n            }\" > /dev/null 2>&1 || true\n    fi\n}\n\n# 回滚部署\nrollback_deployment() {\n    log_warning \"开始回滚部署...\"\n    \n    # 停止当前服务\n    docker-compose -f \"$DOCKER_COMPOSE_FILE\" down --timeout 30 || true\n    \n    # 恢复最新备份（如果存在）\n    local latest_backup=$(find \"$BACKUP_DIR\" -type d -name \"pre-deploy-*\" | sort -r | head -n1)\n    if [ -n \"$latest_backup\" ] && [ -d \"$latest_backup\" ]; then\n        log_info \"恢复备份: $latest_backup\"\n        \n        # 恢复数据文件\n        if [ -d \"$latest_backup/uploads\" ]; then\n            rm -rf \"$DATA_DIR/uploads\"\n            cp -r \"$latest_backup/uploads\" \"$DATA_DIR/\"\n        fi\n        \n        if [ -d \"$latest_backup/app\" ]; then\n            rm -rf \"$DATA_DIR/app\"\n            cp -r \"$latest_backup/app\" \"$DATA_DIR/\"\n        fi\n        \n        log_success \"数据回滚完成\"\n    fi\n}\n\n# 显示部署信息\nshow_deployment_info() {\n    log_success \"🎉 部署完成！\"\n    echo\n    echo \"=== 部署信息 ===\"\n    echo \"部署时间: $DEPLOY_DATE\"\n    echo \"项目版本: $(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')\"\n    echo \"服务状态:\"\n    docker-compose -f \"$DOCKER_COMPOSE_FILE\" ps\n    echo\n    echo \"=== 访问地址 ===\"\n    echo \"应用地址: http://localhost (生产环境请配置域名和SSL)\"\n    echo \"API文档: http://localhost/api-docs\"\n    echo \"监控面板: http://localhost:3001 (Grafana)\"\n    echo \"指标收集: http://localhost:9090 (Prometheus)\"\n    echo\n    echo \"=== 管理命令 ===\"\n    echo \"查看日志: docker-compose -f $DOCKER_COMPOSE_FILE logs -f [服务名]\"\n    echo \"重启服务: docker-compose -f $DOCKER_COMPOSE_FILE restart [服务名]\"\n    echo \"停止服务: docker-compose -f $DOCKER_COMPOSE_FILE down\"\n    echo\n    echo \"=== 重要提醒 ===\"\n    echo \"1. 请及时配置SSL证书和域名\"\n    echo \"2. 修改默认密码（数据库、Grafana等）\"\n    echo \"3. 配置生产环境的备份策略\"\n    echo \"4. 设置监控告警规则\"\n    echo\n}\n\n# 主要部署流程\nmain() {\n    log_info \"开始智能工作助手生产环境部署...\"\n    log_info \"部署时间: $DEPLOY_DATE\"\n    \n    check_dependencies\n    check_environment\n    create_directories\n    backup_existing_data\n    stop_existing_services\n    build_images\n    start_services\n    health_check\n    run_wechat_check\n    cleanup_old_resources\n    update_system_services\n    send_notification\n    show_deployment_info\n    \n    log_success \"🎉 智能工作助手部署成功完成！\"\n}\n\n# 参数处理\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        --skip-backup)\n            SKIP_BACKUP=true\n            shift\n            ;;\n        --skip-health-check)\n            SKIP_HEALTH_CHECK=true\n            shift\n            ;;\n        --rollback)\n            rollback_deployment\n            exit 0\n            ;;\n        -h|--help)\n            echo \"用法: $0 [选项]\"\n            echo \"选项:\"\n            echo \"  --skip-backup       跳过备份步骤\"\n            echo \"  --skip-health-check 跳过健康检查\"\n            echo \"  --rollback          回滚到上一个备份\"\n            echo \"  -h, --help          显示帮助信息\"\n            exit 0\n            ;;\n        *)\n            log_error \"未知参数: $1\"\n            exit 1\n            ;;\n    esac\ndone\n\n# 执行主流程\nmain